RUN CONTAINERS
Once you have the container images you can use them to run containers.

CONTAINER STATES:

- CREATED : a container that is created but is not started.

- RUNNING : a container that is running with its processes.

- STOPPED : a container with its processes stopped.

- PAUSED : a container with its processes paused. Not supported for rootless containers.

- DELETED : a container with its processes in a dead state.


podman ps 
to list the running containers on the system. 


podman ps -a 
to view all containers (that are created, stopped, paused, or running) in the machine.


podman create 
to create the container to run later. 
To create the container, you use the ID of the localhost/python36 container image. You also use the --name option to set a name to identify the container. 
The output of the command is the long ID of the container.

es.
[user@host ~]$ podman create --name python36 dd6ca291f097
c54c7ee281581c198cb96b07d78a0f94be083ae94dacbae69c05bd8cd354bbec


-------------------------------


RUN A CONTAINER FROM A REMOTE REPOSITORY


podman run
The podman run command runs a process inside a container, and this process starts the new container.

es.
[user@host ~]$ podman run -d --name python38 \
registry.access.redhat.com/ubi8/python-38 \
sleep infinity

a60f71a1dc1b997f5ef244aaed232e5de71dd1e8a2565428ccfebde73a2f9462

-------------------------------


ENVIRONMENT ISOLATION IN CONTAINERS

Containers isolate the environment of an application. Each container has its own file system, networking, and processes.


ps -ax
to list processes


podman exec
to execute a command inside a running contaiener

-------------------------------


